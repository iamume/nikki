# 15
同じような話は何度も書いたけど。

## 失敗する考え方
大体の場合、というか○○が△△の全てを内包していない限り必ず「○○を△△の代わりに使おう」という考え方は失敗するか、そうでなくても面倒が増えるだけに終わる。典型的な例が「iPad Pro をラップトップの代わりにしよう」という試みだ。iPad Pro に十分実用的なキーボードとトラックパッド（もしくはマウス）を追加して一応それらしく体裁を整えたとする。ラップトップで使っているアプリケーションがそのまま動くわけではないし、そもそも iPadOS におけるファイル管理の基本的な考え方は Windows とも macOS とも異なっているので、使い勝手を多少寄せたところでワークフローを変えざるを得ない。で、それをもって多くの人が「まだ iPad Pro ではラップトップを代替できない」みたいなことをドヤ顔で言い始める。お前らは白痴か。

私は「なぜ人はワークフローを変えたがらないのだろう」と不思議に思う。今までのやり方が大好きなのだよね、みんな。それで、今のやり方を新しいものに適用するために無駄な時間や金を使って勝手に落胆してる。モノが違うんだから無理があるのは決まってるでしょうに。

## iPadOS から快適にサイトを更新できる仕組みを考える
私の理想は「ファイラでよしなにディレクトリ構造を作ってその中にエディタで適当にテキストを書いたり画像を置いとけば、バックグラウンドでいい感じにしてくれて勝手にサイトが更新されている」である。FTPとかもう使いたくないし、ファッキンシットなブラウザ上のブログエディタなんて使いたくない。使い慣れたテキストエディタだけで日本語を書きたいのだ。そんで自動で処理してほしい。さあ書いたぞ！これをアップロードするぞ！ヤッター更新できた！バカか。書いたら更新されてる方がいいに決まってんだろうが。

で、これを実現する。

まずは Github にサイトソース用のレポジトリ（仮に site_src と呼ぼう）を作る。この中身がアレコレ加工されて最終的に自分のサイトが構築されるというレポジトリだ。WorkingCopy というアプリケーションと普段使っている iA Writer でファイルを共有できるようにして、先程の site_src を共有する。そうすると、iA Writer 側でファイルを追加したりすると WorkingCopy 側でも即座にそれが反映されるようになる。それを push すると Github 上に反映される。そうすると Github Actions が動き、site_src の変更に応じてサイトを出力して、やはり自動的にサイト公開用のレポジトリ（仮に site_out と呼ぼう）に push する。site_out は Github Pages によってウェブサイトとして公開されているわけだ。

問題はアレコレ加工する部分で、要するにコレは自分で作る必要がある。既存の静的サイトジェネレータは複雑すぎてあまり好きじゃないし、設定の方法とか調べてる間に自分で作れるから。その部分の開発はローカルでは行わず、Github Codespaces で行う。なぜかというと、iPadOS で動く Pythonista 3 が長らく更新されておらず、そのうち安心して日常的に使うことができなくなる可能性が高いから。別の似たようなアプリケーションに移住してもいいが、いずれも個人開発なのでいつ管理放棄されるか分からないという点に変わりはなく、リスクを避けることを考えると Github Codespaces が安牌であろうということだ。

## より具体的に

### site_src
Markdown で書き散らした文章・画像・その他リソースをひたすら溜め込むレポジトリ。

### site_out
site_src から生成されたサイトのデータを受け取るレポジトリ。この中身が Github Pages で公開される。

### site_builder
site_src で動く Python スクリプトの開発用レポジトリ。

## 不安感
なんかこう全体的に Microsoft に依存してるのはちょっとキショい。まあ現代のネットで Microsoft, Apple, Google, Amazon に全く依存せずにどうにかすることって不可能なので、過剰に気にしても仕方ないのだけれど。ただ、Git そのものは誰かのものではないし、各ステップは他のやり方に切り替え可能なはずだから、依存というほど深刻なことではない気もする。

あと、この仕組みを作り上げたとして意地にどれくらい金がかかるのかちょっと気になる。具体的には、月に何回くらい push したら無料枠を使い果たすのか気になる。